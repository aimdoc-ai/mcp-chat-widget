"use client"

import type React from "react"

import { useState } from "react"
import { MessageCircle, MessageSquare, HelpCircle, Bot, X, Send } from "lucide-react"
import { Input } from "@/components/ui/input"

interface WidgetPreviewProps {
  settings: {
    projectName: string
    chatDescription: string
    systemPrompt: string
    minimizeIcon: string
    widgetSize: string
    widgetPosition: string
    modelProvider: string
    model: string
    mcpEnabled: boolean
    mcpServers: Array<{
      name: string
      transportType: string
      url: string
    }>
  }
}

export const WidgetPreview = ({ settings }: WidgetPreviewProps) => {
  const [isExpanded, setIsExpanded] = useState(false)
  const [messages, setMessages] = useState<Array<{ role: string; content: string }>>([
    { role: "assistant", content: "Hello! How can I help you today?" },
  ])
  const [inputValue, setInputValue] = useState("")

  // Get the icon component based on the selected icon
  const getMinimizeIcon = () => {
    switch (settings.minimizeIcon) {
      case "message-circle":
        return <MessageCircle className="w-5 h-5" />
      case "message-square":
        return <MessageSquare className="w-5 h-5" />
      case "help-circle":
        return <HelpCircle className="w-5 h-5" />
      case "bot":
        return <Bot className="w-5 h-5" />
      default:
        return <MessageCircle className="w-5 h-5" />
    }
  }

  // Get size classes based on the selected size
  const getSizeClasses = () => {
    switch (settings.widgetSize) {
      case "small":
        return "w-[300px] h-[400px]"
      case "medium":
        return "w-[350px] h-[500px]"
      case "large":
        return "w-[400px] h-[600px]"
      default:
        return "w-[350px] h-[500px]"
    }
  }

  // Get position classes based on the selected position
  const getPositionClasses = () => {
    switch (settings.widgetPosition) {
      case "bottom-right":
        return "bottom-4 right-4"
      case "bottom-left":
        return "bottom-4 left-4"
      case "top-right":
        return "top-4 right-4"
      case "top-left":
        return "top-4 left-4"
      default:
        return "bottom-4 right-4"
    }
  }

  // Handle sending a message
  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputValue.trim()) return

    const newMessages = [
      ...messages,
      { role: "user", content: inputValue },
      {
        role: "assistant",
        content: "This is a preview response. In a real widget, this would be generated by the AI model.",
      },
    ]

    setMessages(newMessages)
    setInputValue("")
  }

  return (
    <div className="group h-full overflow-hidden w-full bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-2xl transition-all duration-300 hover:shadow-[0_8px_30px_rgb(0,0,0,0.12)] dark:hover:shadow-[0_8px_30px_rgb(0,0,0,0.2)] sticky top-6">
      <div className="p-4 flex items-center justify-between border-b border-zinc-200 dark:border-zinc-800">
        <div className="flex items-center gap-3">
          <div>
            <h3 className="text-sm font-medium text-zinc-900 dark:text-zinc-100">Widget Preview</h3>
            <p className="text-xs text-zinc-500 dark:text-zinc-400">See how your chat widget will look</p>
          </div>
        </div>
      </div>

      <div className="p-6 bg-zinc-50 dark:bg-zinc-800/50 min-h-[600px] relative">
        {/* Minimized Chat Button */}
        {!isExpanded && (
          <button
            onClick={() => setIsExpanded(true)}
            className="absolute z-10 flex items-center justify-center w-12 h-12 rounded-full bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900 shadow-lg hover:shadow-xl transition-all duration-300"
            style={{
              right: settings.widgetPosition.includes("right") ? "16px" : "auto",
              left: settings.widgetPosition.includes("left") ? "16px" : "auto",
              bottom: settings.widgetPosition.includes("bottom") ? "16px" : "auto",
              top: settings.widgetPosition.includes("top") ? "16px" : "auto",
            }}
          >
            {getMinimizeIcon()}
          </button>
        )}

        {/* Expanded Chat Widget */}
        {isExpanded && (
          <div
            className={`absolute z-10 bg-white dark:bg-zinc-900 rounded-xl shadow-2xl overflow-hidden flex flex-col ${getSizeClasses()}`}
            style={{
              right: settings.widgetPosition.includes("right") ? "16px" : "auto",
              left: settings.widgetPosition.includes("left") ? "16px" : "auto",
              bottom: settings.widgetPosition.includes("bottom") ? "16px" : "auto",
              top: settings.widgetPosition.includes("top") ? "16px" : "auto",
            }}
          >
            {/* Widget Header */}
            <div className="p-3 border-b border-zinc-200 dark:border-zinc-800 flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-zinc-900 dark:text-zinc-100">{settings.projectName}</h3>
                <p className="text-xs text-zinc-500 dark:text-zinc-400">{settings.chatDescription}</p>
              </div>
              <button
                onClick={() => setIsExpanded(false)}
                className="w-6 h-6 flex items-center justify-center rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors"
              >
                <X className="w-4 h-4 text-zinc-500" />
              </button>
            </div>

            {/* Chat Messages */}
            <div className="flex-1 overflow-y-auto p-3 space-y-3">
              {messages.map((message, index) => (
                <div key={index} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                  <div
                    className={`max-w-[80%] p-2 rounded-lg ${
                      message.role === "user"
                        ? "bg-zinc-900 text-white dark:bg-zinc-100 dark:text-zinc-900"
                        : "bg-zinc-100 text-zinc-900 dark:bg-zinc-800 dark:text-zinc-100"
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                  </div>
                </div>
              ))}
            </div>

            {/* Input Area */}
            <form
              onSubmit={handleSendMessage}
              className="p-3 border-t border-zinc-200 dark:border-zinc-800 flex items-center gap-2"
            >
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Type your message..."
                className="flex-1 bg-zinc-100 dark:bg-zinc-800 border-none text-sm"
              />
              <button
                type="submit"
                className="w-8 h-8 flex items-center justify-center rounded-full bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900"
              >
                <Send className="w-4 h-4" />
              </button>
            </form>

            {/* Model Info */}
            <div className="px-3 py-1 bg-zinc-50 dark:bg-zinc-800/50 text-xs text-zinc-500 text-center">
              Powered by {settings.modelProvider === "openai" ? "OpenAI" : "Anthropic"} â€¢{" "}
              {settings.modelProvider === "openai"
                ? settings.model === "gpt-4o"
                  ? "GPT-4o"
                  : settings.model === "gpt-4.1"
                    ? "GPT-4.1"
                    : settings.model === "gpt-4.1-mini"
                      ? "GPT-4.1-mini"
                      : "GPT-4o"
                : settings.model === "claude-3-7-sonnet-20250219"
                  ? "Claude 3.7 Sonnet"
                  : settings.model === "claude-3-5-sonnet-20241022"
                    ? "Claude 3.5 Sonnet"
                    : settings.model === "claude-3-5-haiku-20241022"
                      ? "Claude 3.5 Haiku"
                      : "Claude"}
            </div>
          </div>
        )}

        {/* Background Website Mockup */}
        <div className="w-full h-full bg-white dark:bg-zinc-900 rounded-xl overflow-hidden opacity-50">
          <div className="h-12 bg-zinc-100 dark:bg-zinc-800 flex items-center px-4">
            <div className="w-3 h-3 rounded-full bg-zinc-300 dark:bg-zinc-600 mr-2"></div>
            <div className="w-3 h-3 rounded-full bg-zinc-300 dark:bg-zinc-600 mr-2"></div>
            <div className="w-3 h-3 rounded-full bg-zinc-300 dark:bg-zinc-600"></div>
            <div className="w-48 h-6 bg-zinc-200 dark:bg-zinc-700 rounded-full mx-auto"></div>
          </div>
          <div className="p-4">
            <div className="w-full h-40 bg-zinc-200 dark:bg-zinc-700 rounded-lg mb-4"></div>
            <div className="w-3/4 h-6 bg-zinc-200 dark:bg-zinc-700 rounded-full mb-2"></div>
            <div className="w-1/2 h-6 bg-zinc-200 dark:bg-zinc-700 rounded-full mb-4"></div>
            <div className="w-full h-4 bg-zinc-200 dark:bg-zinc-700 rounded-full mb-2"></div>
            <div className="w-full h-4 bg-zinc-200 dark:bg-zinc-700 rounded-full mb-2"></div>
            <div className="w-3/4 h-4 bg-zinc-200 dark:bg-zinc-700 rounded-full mb-4"></div>
            <div className="w-full h-40 bg-zinc-200 dark:bg-zinc-700 rounded-lg mb-4"></div>
            <div className="w-full h-4 bg-zinc-200 dark:bg-zinc-700 rounded-full mb-2"></div>
            <div className="w-full h-4 bg-zinc-200 dark:bg-zinc-700 rounded-full mb-2"></div>
            <div className="w-1/2 h-4 bg-zinc-200 dark:bg-zinc-700 rounded-full"></div>
          </div>
        </div>
      </div>
    </div>
  )
}
